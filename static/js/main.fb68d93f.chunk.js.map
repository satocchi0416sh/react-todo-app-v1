{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNA6DeA,MA3Df,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAgBtB,OACI,sBAAMW,UAAU,YAAYC,SAdX,SAAAH,GACjBA,EAAEI,iBAIFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAIT,SACKL,EAAME,KACH,qCACI,uBACIoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,mBAAlB,uBAGJ,qCACI,uBACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,cAAlB,4B,sBCPLa,MAxCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC5C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACArB,UAAWoB,EAAKE,WAAa,oBAAqB,WADlD,UAII,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACAuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEV,cAAC,IAAD,CACAuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACjDP,UAAU,mBAZbqB,OC2BEG,MAlDf,WACI,MAA0BrC,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcW,EAAd,KAmCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SApCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OA8BL,cAAC,EAAD,CACAb,MAAOA,EACPC,aAhBa,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAULZ,WA9BW,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IA4BLZ,WAzBW,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCf5DC,MAPf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCJNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fb68d93f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n\n        setInput('');\n    };\n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            {props.edit ? (\n                <>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Update your item\"\n                        value={input}\n                        name='text'\n                        className='todo-input edit'\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n                    <button className=\"todo-button edit\">Update</button>\n                </>\n            ) : (\n                <>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Add a todo\"\n                        value={input}\n                        name='text'\n                        className='todo-input'\n                        onChange={handleChange}\n                        ref={inputRef}\n                    />\n                    <button className=\"todo-button\">Add Todo</button>\n                </>\n            )}\n\n        </form>\n    )\n}\n\nexport default TodoForm\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport { RiCloseCircleLine } from 'react-icons/ri'\nimport { TiEdit } from 'react-icons/ti'\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n    }\n\n    return todos.map((todo, index) => (\n        <div \n        className={todo.isComplete ? 'todo-row complete': 'todo-row'}\n        key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n                <RiCloseCircleLine\n                onClick={() => removeTodo(todo.id)}\n                className='delete-icon'\n                />\n                <TiEdit\n                onClick={() => setEdit({id: todo.id, value: todo.text})}\n                className='edit-icon'\n                />\n            </div>\n        </div>\n    ))\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport Todo from './Todo';\nimport TodoForm from './TodoForm'\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos]\n\n        setTodos(newTodos)\n    };\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id);\n\n        setTodos(removeArr);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        });\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <div>\n            <h1>What's the Plan for Today?</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo\n            todos={todos} \n            completeTodo={completeTodo} \n            removeTodo={removeTodo}\n            updateTodo={updateTodo}\n             />\n        </div>\n    )\n};\n\nexport default TodoList\n","import React from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}